package com.bimarianDev.truckDataIngestion;

import java.io.FileNotFoundException;
import java.io.Serializable;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;

import org.apache.spark.api.java.function.Function;

import com.cloudera.spark.hbase.JavaHBaseContext;
//import com.spark.hbase.SparkHbaseBulkInsert.PutFunction;
import com.google.gson.JsonIOException;
import com.google.gson.JsonSyntaxException;
import com.spark.hbase.SparkHbaseBulkInsert.PutFunction;

public class TruckDataBulkInsert implements Serializable {

	private static final long serialVersionUID = 8310463030761304020L;

	public static void main(String[] args) throws JsonIOException,
			JsonSyntaxException, FileNotFoundException {
		SparkConf conf = new SparkConf().setAppName("Truck Data Bulk Insert").setMaster("local");

		JavaSparkContext ctx = new JavaSparkContext(conf);
		String path = "C:/Users/Vostro/Desktop/input/employee.json";

		List<TruckBean> truckBean = TruckJsonToObject.getTruckData(path);
		JavaRDD<TruckBean> truck = ctx.parallelize(truckBean);

		System.out.println("log data count" + truck.collect());
		Configuration hconf = HBaseConfiguration.create();
		hconf.addResource(new Path("/etc/hbase/conf.cloudera.yarn/core-site.xml"));
		hconf.addResource(new Path("/etc/hbase/conf.cloudera.hbase/hbase-site.xml"));
		
		JavaHBaseContext hbaseContext =new JavaHBaseContext(ctx,hconf);
		
		hbaseContext.bulkPut(truck,"truckInfo",new PutFunction(), true);
		}
		@SuppressWarnings("serial")
		public static class PutFunction implements Function<TruckBean, Put>{
			@Override
			public Put call(TruckBean tbean) throws Exception {
				//String[] cell=logline.split(",");
				 Put put = new Put(Bytes.toBytes(tbean.getTimestamp()));
				 put.add((Bytes.toBytes("truckParameters")),(Bytes.toBytes("ip")),(Bytes.toBytes( cell[0])));
				 put.add((Bytes.toBytes("truckParameters")),(Bytes.toBytes("country")),(Bytes.toBytes( cell[1])));
				 put.add((Bytes.toBytes("truckParameters")),(Bytes.toBytes("descrip")),(Bytes.toBytes( cell[2])));
				 put.add((Bytes.toBytes("truckParameters")),(Bytes.toBytes("leader")),(Bytes.toBytes( cell[3])));
				 put.add((Bytes.toBytes("truckParameters")),(Bytes.toBytes("GDP")),(Bytes.toBytes( cell[4])));
				return put;
			}
			
		}
		ctx.close();
	}
}
