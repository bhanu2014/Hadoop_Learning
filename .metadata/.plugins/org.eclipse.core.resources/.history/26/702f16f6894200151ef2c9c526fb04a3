package com.client.sum;

import java.util.Map;

import org.apache.commons.configuration.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.client.HConnection;
import org.apache.hadoop.hbase.client.HConnectionManager;
import org.apache.hadoop.hbase.client.HTableInterface;
import org.apache.hadoop.hbase.client.coprocessor.Batch;
import org.apache.hadoop.hbase.ipc.BlockingRpcCallback;
import org.myname.hbase.Coprocessor.autogenerated.Sum.SumRequest;
import org.myname.hbase.Coprocessor.autogenerated.Sum.SumResponse;
import org.myname.hbase.Coprocessor.autogenerated.Sum.SumService;

import com.google.protobuf.ServiceException;

public class Aggregrator {
	Configuration conf = (Configuration) HBaseConfiguration.create();
	HConnection connection = HConnectionManager.createConnection((org.apache.hadoop.conf.Configuration) conf);
	HTableInterface table = connection.getTable("users");
	final SumRequest request = SumRequest.newBuilder().setFamily("salaryDet").setColumn("gross").build();
	try {
	Map<byte[], Long> results = table.CoprocessorService (SumService.class, null, null,
	new Batch.Call<SumService, Long>() {
	    @Override
	        public Long call(SumService aggregate) throws IOException {
	BlockingRpcCallback rpcCallback = new BlockingRpcCallback();
	            aggregate.getSum(null, request, rpcCallback);
	            SumResponse response = (SumResponse) rpcCallback.get();
	            return response.hasSum() ? response.getSum() : 0L;
	        }
	    });
	    for (Long sum : results.values()) {
	        System.out.println("Sum = " + sum);
	    }
	} catch (ServiceException e1) {
	e1.printStackTrace();
	} catch (Throwable e) {
	    e1.printStackTrace();
	}
}
}
